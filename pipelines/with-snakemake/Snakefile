species = {
    'Salmonella-enterica': {
        'readsID': '2492428',
        'reference_url': 'http://ftp.ncbi.nlm.nih.gov/genomes/all/GCA_000988525.2_ASM98852v2/GCA_000988525.2_ASM98852v2_genomic.fna.gz'
    },
    'Staphylococcus-aureus': {
        'readsID': '1274026',
        'reference_url': 'http://ftp.ncbi.nlm.nih.gov/genomes/all/GCA_000013425.1_ASM1342v1/GCA_000013425.1_ASM1342v1_genomic.fna.gz'
    }
}

THREADS=2
TEMP='./tmp'

FINAL_FILES = []
# Need to create some flag files so that rules for downloading data that do
# not need an input, can have one so that they can be wildcarded.
# As well, create the FINAL_FILES list.
def init():
    for specie in species:
        FINAL_FILES.append(specie + '.vcf')

        # TODO check if file already exists, if it does, don't make a new one
        # with newer date, as that will restart the pipeline.
        with open(specie + '.flag', 'w') as specieFlag:
            specieFlag.write('')

init()

rule all:
    input: FINAL_FILES

# === DOWNLOAD ===

rule download_sra:
    input: '{specie}.flag'
    output: '{specie}.sra'
    run:
        readsID = species[wildcards.specie]['readsID']
        shell('''
            bionode-ncbi download sra {readsID} > {TEMP} && rm {TEMP};
            cp {readsID}/*.sra {output} && rm -rf {readsID};
        ''')

rule download_reference:
    input: '{specie}.flag'
    output: '{specie}.genomic.fna.gz'
    run:
        reference_url = species[wildcards.specie]['reference_url']
        shell('curl -s {reference_url} -o {output}')

# === EXTRACT/DECOMPRESS ===

rule extract_sra:
    input: '{specie}.sra'
    output: '{specie}-fastq-dump.log'
    shell: 'fastq-dump --split-files --skip-technical --gzip {input} > {output}'

rule decompress_reference:
    input: '{specie}.genomic.fna.gz'
    output: '{specie}.genomic.fna'
    shell: 'bgzip -d {input} --stdout > {output}'

# === MAPPING ===

rule index_reference:
    input: '{specie}.genomic.fna.gz'
    output: ['{specie}-bwa-index.log', '{specie}_1.fastq.gz', '{specie}_2.fastq.gz']
    shell: 'bwa index {input} > {output[0]}'

rule bwa_mem:
    input:
        ref = '{specie}.genomic.fna.gz',
        readsHappened = '{specie}-fastq-dump.log',
        sample = ['{specie}_1.fastq.gz', '{specie}_2.fastq.gz'],
        index_files = '{specie}-bwa-index.log'
    log: 'logs/bwa_mem/{specie}.log'
    output: '{specie}.sam'
    wrapper: '0.0.8/bio/bwa_mem'

rule bam:
    input: '{specie}.sam'
    output: '{specie}.bam'
    wrapper: '0.0.8/bio/samtools_sort'

rule bai:
    input: '{specie}.bam'
    output: '{specie}.bam.bai'
    wrapper: '0.0.8/bio/samtools_index'

rule call:
    input:
        bam = '{specie}.bam',
        alignment_index = '{specie}.bam.bai',
        reference = '{specie}.genomic.fna'
    output: '{specie}.vcf'
    shell: 'samtools mpileup -uf {input.reference} {input.bam} | bcftools call -c - > {output}'

# === CLEAN ===

rule clean:
    run:
        s = [specie for specie in species]
        shell('rm -rf {s}*; rm -rf logs')
